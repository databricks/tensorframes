// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/config.proto

package org.tensorflow.framework;

/**
 * Protobuf type {@code tensorflow.ConfigProto}
 *
 * <pre>
 * Session configuration parameters.
 * The system picks an appropriate values for fields that are not set.
 * </pre>
 */
public  final class ConfigProto extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:tensorflow.ConfigProto)
    ConfigProtoOrBuilder {
  // Use ConfigProto.newBuilder() to construct.
  private ConfigProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private ConfigProto() {
    intraOpParallelismThreads_ = 0;
    interOpParallelismThreads_ = 0;
    usePerSessionThreads_ = false;
    placementPeriod_ = 0;
    deviceFilters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    allowSoftPlacement_ = false;
    logDevicePlacement_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return com.google.protobuf.UnknownFieldSet.getDefaultInstance();
  }
  private ConfigProto(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!input.skipField(tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              deviceCount_ = com.google.protobuf.MapField.newMapField(
                  DeviceCountDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
            deviceCount = input.readMessage(
                DeviceCountDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            deviceCount_.getMutableMap().put(deviceCount.getKey(), deviceCount.getValue());
            break;
          }
          case 16: {

            intraOpParallelismThreads_ = input.readInt32();
            break;
          }
          case 24: {

            placementPeriod_ = input.readInt32();
            break;
          }
          case 34: {
            String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
              deviceFilters_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000020;
            }
            deviceFilters_.add(s);
            break;
          }
          case 40: {

            interOpParallelismThreads_ = input.readInt32();
            break;
          }
          case 50: {
            org.tensorflow.framework.GPUOptions.Builder subBuilder = null;
            if (gpuOptions_ != null) {
              subBuilder = gpuOptions_.toBuilder();
            }
            gpuOptions_ = input.readMessage(org.tensorflow.framework.GPUOptions.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(gpuOptions_);
              gpuOptions_ = subBuilder.buildPartial();
            }

            break;
          }
          case 56: {

            allowSoftPlacement_ = input.readBool();
            break;
          }
          case 64: {

            logDevicePlacement_ = input.readBool();
            break;
          }
          case 72: {

            usePerSessionThreads_ = input.readBool();
            break;
          }
          case 82: {
            org.tensorflow.framework.GraphOptions.Builder subBuilder = null;
            if (graphOptions_ != null) {
              subBuilder = graphOptions_.toBuilder();
            }
            graphOptions_ = input.readMessage(org.tensorflow.framework.GraphOptions.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(graphOptions_);
              graphOptions_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(
          new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this));
    } finally {
      if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
        deviceFilters_ = deviceFilters_.getUnmodifiableView();
      }
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.tensorflow.framework.ConfigProtos.internal_static_tensorflow_ConfigProto_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetDeviceCount();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.tensorflow.framework.ConfigProtos.internal_static_tensorflow_ConfigProto_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.tensorflow.framework.ConfigProto.class, org.tensorflow.framework.ConfigProto.Builder.class);
  }

  private int bitField0_;
  public static final int DEVICE_COUNT_FIELD_NUMBER = 1;
  private static final class DeviceCountDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.Integer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.Integer>newDefaultInstance(
                org.tensorflow.framework.ConfigProtos.internal_static_tensorflow_ConfigProto_DeviceCountEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.INT32,
                0);
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.Integer> deviceCount_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
  internalGetDeviceCount() {
    if (deviceCount_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          DeviceCountDefaultEntryHolder.defaultEntry);
   }
    return deviceCount_;
  }
  /**
   * <code>map&lt;string, int32&gt; device_count = 1;</code>
   *
   * <pre>
   * Map from device type name (e.g., "CPU" or "GPU" ) to maximum
   * number of devices of that type to use.  If a particular device
   * type is not found in the map, the system picks an appropriate
   * number.
   * </pre>
   */

  public java.util.Map<java.lang.String, java.lang.Integer> getDeviceCount() {
    return internalGetDeviceCount().getMap();
  }

  public static final int INTRA_OP_PARALLELISM_THREADS_FIELD_NUMBER = 2;
  private int intraOpParallelismThreads_;
  /**
   * <code>optional int32 intra_op_parallelism_threads = 2;</code>
   *
   * <pre>
   * The execution of an individual op (for some op types) can be
   * parallelized on a pool of intra_op_parallelism_threads.
   * 0 means the system picks an appropriate number.
   * </pre>
   */
  public int getIntraOpParallelismThreads() {
    return intraOpParallelismThreads_;
  }

  public static final int INTER_OP_PARALLELISM_THREADS_FIELD_NUMBER = 5;
  private int interOpParallelismThreads_;
  /**
   * <code>optional int32 inter_op_parallelism_threads = 5;</code>
   *
   * <pre>
   * Nodes that perform blocking operations are enqueued on a pool of
   * inter_op_parallelism_threads available in each process.
   * 0 means the system picks an appropriate number.
   * Note that the first Session created in the process sets the
   * number of threads for all future sessions unless use_per_session_threads is
   * true.
   * </pre>
   */
  public int getInterOpParallelismThreads() {
    return interOpParallelismThreads_;
  }

  public static final int USE_PER_SESSION_THREADS_FIELD_NUMBER = 9;
  private boolean usePerSessionThreads_;
  /**
   * <code>optional bool use_per_session_threads = 9;</code>
   *
   * <pre>
   * If true, use a new set of threads for this session rather than the global
   * pool of threads. Only supported by direct sessions.
   * If false, use the global threads created by the first session.
   * </pre>
   */
  public boolean getUsePerSessionThreads() {
    return usePerSessionThreads_;
  }

  public static final int PLACEMENT_PERIOD_FIELD_NUMBER = 3;
  private int placementPeriod_;
  /**
   * <code>optional int32 placement_period = 3;</code>
   *
   * <pre>
   * Assignment of Nodes to Devices is recomputed every placement_period
   * steps until the system warms up (at which point the recomputation
   * typically slows down automatically).
   * </pre>
   */
  public int getPlacementPeriod() {
    return placementPeriod_;
  }

  public static final int DEVICE_FILTERS_FIELD_NUMBER = 4;
  private com.google.protobuf.LazyStringList deviceFilters_;
  /**
   * <code>repeated string device_filters = 4;</code>
   *
   * <pre>
   * When any filters are present sessions will ignore all devices which do not
   * match the filters. Each filter can be partially specified, e.g. "/job:ps"
   * "/job:worker/replica:3", etc.
   * </pre>
   */
  public com.google.protobuf.ProtocolStringList
      getDeviceFiltersList() {
    return deviceFilters_;
  }
  /**
   * <code>repeated string device_filters = 4;</code>
   *
   * <pre>
   * When any filters are present sessions will ignore all devices which do not
   * match the filters. Each filter can be partially specified, e.g. "/job:ps"
   * "/job:worker/replica:3", etc.
   * </pre>
   */
  public int getDeviceFiltersCount() {
    return deviceFilters_.size();
  }
  /**
   * <code>repeated string device_filters = 4;</code>
   *
   * <pre>
   * When any filters are present sessions will ignore all devices which do not
   * match the filters. Each filter can be partially specified, e.g. "/job:ps"
   * "/job:worker/replica:3", etc.
   * </pre>
   */
  public java.lang.String getDeviceFilters(int index) {
    return deviceFilters_.get(index);
  }
  /**
   * <code>repeated string device_filters = 4;</code>
   *
   * <pre>
   * When any filters are present sessions will ignore all devices which do not
   * match the filters. Each filter can be partially specified, e.g. "/job:ps"
   * "/job:worker/replica:3", etc.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getDeviceFiltersBytes(int index) {
    return deviceFilters_.getByteString(index);
  }

  public static final int GPU_OPTIONS_FIELD_NUMBER = 6;
  private org.tensorflow.framework.GPUOptions gpuOptions_;
  /**
   * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
   *
   * <pre>
   * Options that apply to all GPUs.
   * </pre>
   */
  public boolean hasGpuOptions() {
    return gpuOptions_ != null;
  }
  /**
   * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
   *
   * <pre>
   * Options that apply to all GPUs.
   * </pre>
   */
  public org.tensorflow.framework.GPUOptions getGpuOptions() {
    return gpuOptions_ == null ? org.tensorflow.framework.GPUOptions.getDefaultInstance() : gpuOptions_;
  }
  /**
   * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
   *
   * <pre>
   * Options that apply to all GPUs.
   * </pre>
   */
  public org.tensorflow.framework.GPUOptionsOrBuilder getGpuOptionsOrBuilder() {
    return getGpuOptions();
  }

  public static final int ALLOW_SOFT_PLACEMENT_FIELD_NUMBER = 7;
  private boolean allowSoftPlacement_;
  /**
   * <code>optional bool allow_soft_placement = 7;</code>
   *
   * <pre>
   * Whether soft placement is allowed. If allow_soft_placement is true,
   * an op will be placed on CPU if
   *   1. there's no GPU implementation for the OP
   * or
   *   2. no GPU devices are known or registered
   * or
   *   3. need to co-locate with reftype input(s) which are from CPU.
   * </pre>
   */
  public boolean getAllowSoftPlacement() {
    return allowSoftPlacement_;
  }

  public static final int LOG_DEVICE_PLACEMENT_FIELD_NUMBER = 8;
  private boolean logDevicePlacement_;
  /**
   * <code>optional bool log_device_placement = 8;</code>
   *
   * <pre>
   * Whether device placements should be logged.
   * </pre>
   */
  public boolean getLogDevicePlacement() {
    return logDevicePlacement_;
  }

  public static final int GRAPH_OPTIONS_FIELD_NUMBER = 10;
  private org.tensorflow.framework.GraphOptions graphOptions_;
  /**
   * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
   *
   * <pre>
   * Options that apply to all graphs.
   * </pre>
   */
  public boolean hasGraphOptions() {
    return graphOptions_ != null;
  }
  /**
   * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
   *
   * <pre>
   * Options that apply to all graphs.
   * </pre>
   */
  public org.tensorflow.framework.GraphOptions getGraphOptions() {
    return graphOptions_ == null ? org.tensorflow.framework.GraphOptions.getDefaultInstance() : graphOptions_;
  }
  /**
   * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
   *
   * <pre>
   * Options that apply to all graphs.
   * </pre>
   */
  public org.tensorflow.framework.GraphOptionsOrBuilder getGraphOptionsOrBuilder() {
    return getGraphOptions();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
         : internalGetDeviceCount().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
      deviceCount = DeviceCountDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      output.writeMessage(1, deviceCount);
    }
    if (intraOpParallelismThreads_ != 0) {
      output.writeInt32(2, intraOpParallelismThreads_);
    }
    if (placementPeriod_ != 0) {
      output.writeInt32(3, placementPeriod_);
    }
    for (int i = 0; i < deviceFilters_.size(); i++) {
      com.google.protobuf.GeneratedMessage.writeString(output, 4, deviceFilters_.getRaw(i));
    }
    if (interOpParallelismThreads_ != 0) {
      output.writeInt32(5, interOpParallelismThreads_);
    }
    if (gpuOptions_ != null) {
      output.writeMessage(6, getGpuOptions());
    }
    if (allowSoftPlacement_ != false) {
      output.writeBool(7, allowSoftPlacement_);
    }
    if (logDevicePlacement_ != false) {
      output.writeBool(8, logDevicePlacement_);
    }
    if (usePerSessionThreads_ != false) {
      output.writeBool(9, usePerSessionThreads_);
    }
    if (graphOptions_ != null) {
      output.writeMessage(10, getGraphOptions());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry
         : internalGetDeviceCount().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.Integer>
      deviceCount = DeviceCountDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, deviceCount);
    }
    if (intraOpParallelismThreads_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, intraOpParallelismThreads_);
    }
    if (placementPeriod_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, placementPeriod_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < deviceFilters_.size(); i++) {
        dataSize += computeStringSizeNoTag(deviceFilters_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getDeviceFiltersList().size();
    }
    if (interOpParallelismThreads_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, interOpParallelismThreads_);
    }
    if (gpuOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getGpuOptions());
    }
    if (allowSoftPlacement_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, allowSoftPlacement_);
    }
    if (logDevicePlacement_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, logDevicePlacement_);
    }
    if (usePerSessionThreads_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, usePerSessionThreads_);
    }
    if (graphOptions_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getGraphOptions());
    }
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static org.tensorflow.framework.ConfigProto parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.framework.ConfigProto parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.framework.ConfigProto parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.tensorflow.framework.ConfigProto parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.tensorflow.framework.ConfigProto parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.tensorflow.framework.ConfigProto parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }
  public static org.tensorflow.framework.ConfigProto parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input);
  }
  public static org.tensorflow.framework.ConfigProto parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseDelimitedFrom(input, extensionRegistry);
  }
  public static org.tensorflow.framework.ConfigProto parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return PARSER.parseFrom(input);
  }
  public static org.tensorflow.framework.ConfigProto parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return PARSER.parseFrom(input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.tensorflow.framework.ConfigProto prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code tensorflow.ConfigProto}
   *
   * <pre>
   * Session configuration parameters.
   * The system picks an appropriate values for fields that are not set.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:tensorflow.ConfigProto)
      org.tensorflow.framework.ConfigProtoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.tensorflow.framework.ConfigProtos.internal_static_tensorflow_ConfigProto_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetDeviceCount();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableDeviceCount();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.tensorflow.framework.ConfigProtos.internal_static_tensorflow_ConfigProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.tensorflow.framework.ConfigProto.class, org.tensorflow.framework.ConfigProto.Builder.class);
    }

    // Construct using org.tensorflow.framework.ConfigProto.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      internalGetMutableDeviceCount().clear();
      intraOpParallelismThreads_ = 0;

      interOpParallelismThreads_ = 0;

      usePerSessionThreads_ = false;

      placementPeriod_ = 0;

      deviceFilters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000020);
      if (gpuOptionsBuilder_ == null) {
        gpuOptions_ = null;
      } else {
        gpuOptions_ = null;
        gpuOptionsBuilder_ = null;
      }
      allowSoftPlacement_ = false;

      logDevicePlacement_ = false;

      if (graphOptionsBuilder_ == null) {
        graphOptions_ = null;
      } else {
        graphOptions_ = null;
        graphOptionsBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.tensorflow.framework.ConfigProtos.internal_static_tensorflow_ConfigProto_descriptor;
    }

    public org.tensorflow.framework.ConfigProto getDefaultInstanceForType() {
      return org.tensorflow.framework.ConfigProto.getDefaultInstance();
    }

    public org.tensorflow.framework.ConfigProto build() {
      org.tensorflow.framework.ConfigProto result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.tensorflow.framework.ConfigProto buildPartial() {
      org.tensorflow.framework.ConfigProto result = new org.tensorflow.framework.ConfigProto(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      result.deviceCount_ = internalGetDeviceCount();
      result.deviceCount_.makeImmutable();
      result.intraOpParallelismThreads_ = intraOpParallelismThreads_;
      result.interOpParallelismThreads_ = interOpParallelismThreads_;
      result.usePerSessionThreads_ = usePerSessionThreads_;
      result.placementPeriod_ = placementPeriod_;
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        deviceFilters_ = deviceFilters_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000020);
      }
      result.deviceFilters_ = deviceFilters_;
      if (gpuOptionsBuilder_ == null) {
        result.gpuOptions_ = gpuOptions_;
      } else {
        result.gpuOptions_ = gpuOptionsBuilder_.build();
      }
      result.allowSoftPlacement_ = allowSoftPlacement_;
      result.logDevicePlacement_ = logDevicePlacement_;
      if (graphOptionsBuilder_ == null) {
        result.graphOptions_ = graphOptions_;
      } else {
        result.graphOptions_ = graphOptionsBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.tensorflow.framework.ConfigProto) {
        return mergeFrom((org.tensorflow.framework.ConfigProto)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.tensorflow.framework.ConfigProto other) {
      if (other == org.tensorflow.framework.ConfigProto.getDefaultInstance()) return this;
      internalGetMutableDeviceCount().mergeFrom(
          other.internalGetDeviceCount());
      if (other.getIntraOpParallelismThreads() != 0) {
        setIntraOpParallelismThreads(other.getIntraOpParallelismThreads());
      }
      if (other.getInterOpParallelismThreads() != 0) {
        setInterOpParallelismThreads(other.getInterOpParallelismThreads());
      }
      if (other.getUsePerSessionThreads() != false) {
        setUsePerSessionThreads(other.getUsePerSessionThreads());
      }
      if (other.getPlacementPeriod() != 0) {
        setPlacementPeriod(other.getPlacementPeriod());
      }
      if (!other.deviceFilters_.isEmpty()) {
        if (deviceFilters_.isEmpty()) {
          deviceFilters_ = other.deviceFilters_;
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          ensureDeviceFiltersIsMutable();
          deviceFilters_.addAll(other.deviceFilters_);
        }
        onChanged();
      }
      if (other.hasGpuOptions()) {
        mergeGpuOptions(other.getGpuOptions());
      }
      if (other.getAllowSoftPlacement() != false) {
        setAllowSoftPlacement(other.getAllowSoftPlacement());
      }
      if (other.getLogDevicePlacement() != false) {
        setLogDevicePlacement(other.getLogDevicePlacement());
      }
      if (other.hasGraphOptions()) {
        mergeGraphOptions(other.getGraphOptions());
      }
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.tensorflow.framework.ConfigProto parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.tensorflow.framework.ConfigProto) e.getUnfinishedMessage();
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.Integer> deviceCount_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetDeviceCount() {
      if (deviceCount_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DeviceCountDefaultEntryHolder.defaultEntry);
     }
      return deviceCount_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.Integer>
    internalGetMutableDeviceCount() {
      onChanged();;
      if (deviceCount_ == null) {
        deviceCount_ = com.google.protobuf.MapField.newMapField(
            DeviceCountDefaultEntryHolder.defaultEntry);
      }
      if (!deviceCount_.isMutable()) {
        deviceCount_ = deviceCount_.copy();
      }
      return deviceCount_;
    }
    /**
     * <code>map&lt;string, int32&gt; device_count = 1;</code>
     *
     * <pre>
     * Map from device type name (e.g., "CPU" or "GPU" ) to maximum
     * number of devices of that type to use.  If a particular device
     * type is not found in the map, the system picks an appropriate
     * number.
     * </pre>
     */
    public java.util.Map<java.lang.String, java.lang.Integer> getDeviceCount() {
      return internalGetDeviceCount().getMap();
    }
    /**
     * <code>map&lt;string, int32&gt; device_count = 1;</code>
     *
     * <pre>
     * Map from device type name (e.g., "CPU" or "GPU" ) to maximum
     * number of devices of that type to use.  If a particular device
     * type is not found in the map, the system picks an appropriate
     * number.
     * </pre>
     */
    public java.util.Map<java.lang.String, java.lang.Integer>
    getMutableDeviceCount() {
      return internalGetMutableDeviceCount().getMutableMap();
    }
    /**
     * <code>map&lt;string, int32&gt; device_count = 1;</code>
     *
     * <pre>
     * Map from device type name (e.g., "CPU" or "GPU" ) to maximum
     * number of devices of that type to use.  If a particular device
     * type is not found in the map, the system picks an appropriate
     * number.
     * </pre>
     */
    public Builder putAllDeviceCount(
        java.util.Map<java.lang.String, java.lang.Integer> values) {
      getMutableDeviceCount().putAll(values);
      return this;
    }

    private int intraOpParallelismThreads_ ;
    /**
     * <code>optional int32 intra_op_parallelism_threads = 2;</code>
     *
     * <pre>
     * The execution of an individual op (for some op types) can be
     * parallelized on a pool of intra_op_parallelism_threads.
     * 0 means the system picks an appropriate number.
     * </pre>
     */
    public int getIntraOpParallelismThreads() {
      return intraOpParallelismThreads_;
    }
    /**
     * <code>optional int32 intra_op_parallelism_threads = 2;</code>
     *
     * <pre>
     * The execution of an individual op (for some op types) can be
     * parallelized on a pool of intra_op_parallelism_threads.
     * 0 means the system picks an appropriate number.
     * </pre>
     */
    public Builder setIntraOpParallelismThreads(int value) {
      
      intraOpParallelismThreads_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 intra_op_parallelism_threads = 2;</code>
     *
     * <pre>
     * The execution of an individual op (for some op types) can be
     * parallelized on a pool of intra_op_parallelism_threads.
     * 0 means the system picks an appropriate number.
     * </pre>
     */
    public Builder clearIntraOpParallelismThreads() {
      
      intraOpParallelismThreads_ = 0;
      onChanged();
      return this;
    }

    private int interOpParallelismThreads_ ;
    /**
     * <code>optional int32 inter_op_parallelism_threads = 5;</code>
     *
     * <pre>
     * Nodes that perform blocking operations are enqueued on a pool of
     * inter_op_parallelism_threads available in each process.
     * 0 means the system picks an appropriate number.
     * Note that the first Session created in the process sets the
     * number of threads for all future sessions unless use_per_session_threads is
     * true.
     * </pre>
     */
    public int getInterOpParallelismThreads() {
      return interOpParallelismThreads_;
    }
    /**
     * <code>optional int32 inter_op_parallelism_threads = 5;</code>
     *
     * <pre>
     * Nodes that perform blocking operations are enqueued on a pool of
     * inter_op_parallelism_threads available in each process.
     * 0 means the system picks an appropriate number.
     * Note that the first Session created in the process sets the
     * number of threads for all future sessions unless use_per_session_threads is
     * true.
     * </pre>
     */
    public Builder setInterOpParallelismThreads(int value) {
      
      interOpParallelismThreads_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 inter_op_parallelism_threads = 5;</code>
     *
     * <pre>
     * Nodes that perform blocking operations are enqueued on a pool of
     * inter_op_parallelism_threads available in each process.
     * 0 means the system picks an appropriate number.
     * Note that the first Session created in the process sets the
     * number of threads for all future sessions unless use_per_session_threads is
     * true.
     * </pre>
     */
    public Builder clearInterOpParallelismThreads() {
      
      interOpParallelismThreads_ = 0;
      onChanged();
      return this;
    }

    private boolean usePerSessionThreads_ ;
    /**
     * <code>optional bool use_per_session_threads = 9;</code>
     *
     * <pre>
     * If true, use a new set of threads for this session rather than the global
     * pool of threads. Only supported by direct sessions.
     * If false, use the global threads created by the first session.
     * </pre>
     */
    public boolean getUsePerSessionThreads() {
      return usePerSessionThreads_;
    }
    /**
     * <code>optional bool use_per_session_threads = 9;</code>
     *
     * <pre>
     * If true, use a new set of threads for this session rather than the global
     * pool of threads. Only supported by direct sessions.
     * If false, use the global threads created by the first session.
     * </pre>
     */
    public Builder setUsePerSessionThreads(boolean value) {
      
      usePerSessionThreads_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool use_per_session_threads = 9;</code>
     *
     * <pre>
     * If true, use a new set of threads for this session rather than the global
     * pool of threads. Only supported by direct sessions.
     * If false, use the global threads created by the first session.
     * </pre>
     */
    public Builder clearUsePerSessionThreads() {
      
      usePerSessionThreads_ = false;
      onChanged();
      return this;
    }

    private int placementPeriod_ ;
    /**
     * <code>optional int32 placement_period = 3;</code>
     *
     * <pre>
     * Assignment of Nodes to Devices is recomputed every placement_period
     * steps until the system warms up (at which point the recomputation
     * typically slows down automatically).
     * </pre>
     */
    public int getPlacementPeriod() {
      return placementPeriod_;
    }
    /**
     * <code>optional int32 placement_period = 3;</code>
     *
     * <pre>
     * Assignment of Nodes to Devices is recomputed every placement_period
     * steps until the system warms up (at which point the recomputation
     * typically slows down automatically).
     * </pre>
     */
    public Builder setPlacementPeriod(int value) {
      
      placementPeriod_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 placement_period = 3;</code>
     *
     * <pre>
     * Assignment of Nodes to Devices is recomputed every placement_period
     * steps until the system warms up (at which point the recomputation
     * typically slows down automatically).
     * </pre>
     */
    public Builder clearPlacementPeriod() {
      
      placementPeriod_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList deviceFilters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureDeviceFiltersIsMutable() {
      if (!((bitField0_ & 0x00000020) == 0x00000020)) {
        deviceFilters_ = new com.google.protobuf.LazyStringArrayList(deviceFilters_);
        bitField0_ |= 0x00000020;
       }
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public com.google.protobuf.ProtocolStringList
        getDeviceFiltersList() {
      return deviceFilters_.getUnmodifiableView();
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public int getDeviceFiltersCount() {
      return deviceFilters_.size();
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public java.lang.String getDeviceFilters(int index) {
      return deviceFilters_.get(index);
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDeviceFiltersBytes(int index) {
      return deviceFilters_.getByteString(index);
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public Builder setDeviceFilters(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDeviceFiltersIsMutable();
      deviceFilters_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public Builder addDeviceFilters(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureDeviceFiltersIsMutable();
      deviceFilters_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public Builder addAllDeviceFilters(
        java.lang.Iterable<java.lang.String> values) {
      ensureDeviceFiltersIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, deviceFilters_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public Builder clearDeviceFilters() {
      deviceFilters_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000020);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string device_filters = 4;</code>
     *
     * <pre>
     * When any filters are present sessions will ignore all devices which do not
     * match the filters. Each filter can be partially specified, e.g. "/job:ps"
     * "/job:worker/replica:3", etc.
     * </pre>
     */
    public Builder addDeviceFiltersBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureDeviceFiltersIsMutable();
      deviceFilters_.add(value);
      onChanged();
      return this;
    }

    private org.tensorflow.framework.GPUOptions gpuOptions_ = null;
    private com.google.protobuf.SingleFieldBuilder<
        org.tensorflow.framework.GPUOptions, org.tensorflow.framework.GPUOptions.Builder, org.tensorflow.framework.GPUOptionsOrBuilder> gpuOptionsBuilder_;
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public boolean hasGpuOptions() {
      return gpuOptionsBuilder_ != null || gpuOptions_ != null;
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public org.tensorflow.framework.GPUOptions getGpuOptions() {
      if (gpuOptionsBuilder_ == null) {
        return gpuOptions_ == null ? org.tensorflow.framework.GPUOptions.getDefaultInstance() : gpuOptions_;
      } else {
        return gpuOptionsBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public Builder setGpuOptions(org.tensorflow.framework.GPUOptions value) {
      if (gpuOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        gpuOptions_ = value;
        onChanged();
      } else {
        gpuOptionsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public Builder setGpuOptions(
        org.tensorflow.framework.GPUOptions.Builder builderForValue) {
      if (gpuOptionsBuilder_ == null) {
        gpuOptions_ = builderForValue.build();
        onChanged();
      } else {
        gpuOptionsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public Builder mergeGpuOptions(org.tensorflow.framework.GPUOptions value) {
      if (gpuOptionsBuilder_ == null) {
        if (gpuOptions_ != null) {
          gpuOptions_ =
            org.tensorflow.framework.GPUOptions.newBuilder(gpuOptions_).mergeFrom(value).buildPartial();
        } else {
          gpuOptions_ = value;
        }
        onChanged();
      } else {
        gpuOptionsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public Builder clearGpuOptions() {
      if (gpuOptionsBuilder_ == null) {
        gpuOptions_ = null;
        onChanged();
      } else {
        gpuOptions_ = null;
        gpuOptionsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public org.tensorflow.framework.GPUOptions.Builder getGpuOptionsBuilder() {
      
      onChanged();
      return getGpuOptionsFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    public org.tensorflow.framework.GPUOptionsOrBuilder getGpuOptionsOrBuilder() {
      if (gpuOptionsBuilder_ != null) {
        return gpuOptionsBuilder_.getMessageOrBuilder();
      } else {
        return gpuOptions_ == null ?
            org.tensorflow.framework.GPUOptions.getDefaultInstance() : gpuOptions_;
      }
    }
    /**
     * <code>optional .tensorflow.GPUOptions gpu_options = 6;</code>
     *
     * <pre>
     * Options that apply to all GPUs.
     * </pre>
     */
    private com.google.protobuf.SingleFieldBuilder<
        org.tensorflow.framework.GPUOptions, org.tensorflow.framework.GPUOptions.Builder, org.tensorflow.framework.GPUOptionsOrBuilder> 
        getGpuOptionsFieldBuilder() {
      if (gpuOptionsBuilder_ == null) {
        gpuOptionsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            org.tensorflow.framework.GPUOptions, org.tensorflow.framework.GPUOptions.Builder, org.tensorflow.framework.GPUOptionsOrBuilder>(
                getGpuOptions(),
                getParentForChildren(),
                isClean());
        gpuOptions_ = null;
      }
      return gpuOptionsBuilder_;
    }

    private boolean allowSoftPlacement_ ;
    /**
     * <code>optional bool allow_soft_placement = 7;</code>
     *
     * <pre>
     * Whether soft placement is allowed. If allow_soft_placement is true,
     * an op will be placed on CPU if
     *   1. there's no GPU implementation for the OP
     * or
     *   2. no GPU devices are known or registered
     * or
     *   3. need to co-locate with reftype input(s) which are from CPU.
     * </pre>
     */
    public boolean getAllowSoftPlacement() {
      return allowSoftPlacement_;
    }
    /**
     * <code>optional bool allow_soft_placement = 7;</code>
     *
     * <pre>
     * Whether soft placement is allowed. If allow_soft_placement is true,
     * an op will be placed on CPU if
     *   1. there's no GPU implementation for the OP
     * or
     *   2. no GPU devices are known or registered
     * or
     *   3. need to co-locate with reftype input(s) which are from CPU.
     * </pre>
     */
    public Builder setAllowSoftPlacement(boolean value) {
      
      allowSoftPlacement_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool allow_soft_placement = 7;</code>
     *
     * <pre>
     * Whether soft placement is allowed. If allow_soft_placement is true,
     * an op will be placed on CPU if
     *   1. there's no GPU implementation for the OP
     * or
     *   2. no GPU devices are known or registered
     * or
     *   3. need to co-locate with reftype input(s) which are from CPU.
     * </pre>
     */
    public Builder clearAllowSoftPlacement() {
      
      allowSoftPlacement_ = false;
      onChanged();
      return this;
    }

    private boolean logDevicePlacement_ ;
    /**
     * <code>optional bool log_device_placement = 8;</code>
     *
     * <pre>
     * Whether device placements should be logged.
     * </pre>
     */
    public boolean getLogDevicePlacement() {
      return logDevicePlacement_;
    }
    /**
     * <code>optional bool log_device_placement = 8;</code>
     *
     * <pre>
     * Whether device placements should be logged.
     * </pre>
     */
    public Builder setLogDevicePlacement(boolean value) {
      
      logDevicePlacement_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool log_device_placement = 8;</code>
     *
     * <pre>
     * Whether device placements should be logged.
     * </pre>
     */
    public Builder clearLogDevicePlacement() {
      
      logDevicePlacement_ = false;
      onChanged();
      return this;
    }

    private org.tensorflow.framework.GraphOptions graphOptions_ = null;
    private com.google.protobuf.SingleFieldBuilder<
        org.tensorflow.framework.GraphOptions, org.tensorflow.framework.GraphOptions.Builder, org.tensorflow.framework.GraphOptionsOrBuilder> graphOptionsBuilder_;
    /**
     * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
     *
     * <pre>
     * Options that apply to all graphs.
     * </pre>
     */
    public boolean hasGraphOptions() {
      return graphOptionsBuilder_ != null || graphOptions_ != null;
    }
    /**
     * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
     *
     * <pre>
     * Options that apply to all graphs.
     * </pre>
     */
    public org.tensorflow.framework.GraphOptions getGraphOptions() {
      if (graphOptionsBuilder_ == null) {
        return graphOptions_ == null ? org.tensorflow.framework.GraphOptions.getDefaultInstance() : graphOptions_;
      } else {
        return graphOptionsBuilder_.getMessage();
      }
    }
    /**
     * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
     *
     * <pre>
     * Options that apply to all graphs.
     * </pre>
     */
    public Builder setGraphOptions(org.tensorflow.framework.GraphOptions value) {
      if (graphOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        graphOptions_ = value;
        onChanged();
      } else {
        graphOptionsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
     *
     * <pre>
     * Options that apply to all graphs.
     * </pre>
     */
    public Builder setGraphOptions(
        org.tensorflow.framework.GraphOptions.Builder builderForValue) {
      if (graphOptionsBuilder_ == null) {
        graphOptions_ = builderForValue.build();
        onChanged();
      } else {
        graphOptionsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
     *
     * <pre>
     * Options that apply to all graphs.
     * </pre>
     */
    public Builder mergeGraphOptions(org.tensorflow.framework.GraphOptions value) {
      if (graphOptionsBuilder_ == null) {
        if (graphOptions_ != null) {
          graphOptions_ =
            org.tensorflow.framework.GraphOptions.newBuilder(graphOptions_).mergeFrom(value).buildPartial();
        } else {
          graphOptions_ = value;
        }
        onChanged();
      } else {
        graphOptionsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
     *
     * <pre>
     * Options that apply to all graphs.
     * </pre>
     */
    public Builder clearGraphOptions() {
      if (graphOptionsBuilder_ == null) {
        graphOptions_ = null;
        onChanged();
      } else {
        graphOptions_ = null;
        graphOptionsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
     *
     * <pre>
     * Options that apply to all graphs.
     * </pre>
     */
    public org.tensorflow.framework.GraphOptions.Builder getGraphOptionsBuilder() {
      
      onChanged();
      return getGraphOptionsFieldBuilder().getBuilder();
    }
    /**
     * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
     *
     * <pre>
     * Options that apply to all graphs.
     * </pre>
     */
    public org.tensorflow.framework.GraphOptionsOrBuilder getGraphOptionsOrBuilder() {
      if (graphOptionsBuilder_ != null) {
        return graphOptionsBuilder_.getMessageOrBuilder();
      } else {
        return graphOptions_ == null ?
            org.tensorflow.framework.GraphOptions.getDefaultInstance() : graphOptions_;
      }
    }
    /**
     * <code>optional .tensorflow.GraphOptions graph_options = 10;</code>
     *
     * <pre>
     * Options that apply to all graphs.
     * </pre>
     */
    private com.google.protobuf.SingleFieldBuilder<
        org.tensorflow.framework.GraphOptions, org.tensorflow.framework.GraphOptions.Builder, org.tensorflow.framework.GraphOptionsOrBuilder> 
        getGraphOptionsFieldBuilder() {
      if (graphOptionsBuilder_ == null) {
        graphOptionsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            org.tensorflow.framework.GraphOptions, org.tensorflow.framework.GraphOptions.Builder, org.tensorflow.framework.GraphOptionsOrBuilder>(
                getGraphOptions(),
                getParentForChildren(),
                isClean());
        graphOptions_ = null;
      }
      return graphOptionsBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return this;
    }


    // @@protoc_insertion_point(builder_scope:tensorflow.ConfigProto)
  }

  // @@protoc_insertion_point(class_scope:tensorflow.ConfigProto)
  private static final org.tensorflow.framework.ConfigProto DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.tensorflow.framework.ConfigProto();
  }

  public static org.tensorflow.framework.ConfigProto getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConfigProto>
      PARSER = new com.google.protobuf.AbstractParser<ConfigProto>() {
    public ConfigProto parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new ConfigProto(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  public static com.google.protobuf.Parser<ConfigProto> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConfigProto> getParserForType() {
    return PARSER;
  }

  public org.tensorflow.framework.ConfigProto getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

